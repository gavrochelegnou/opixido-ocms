#labels Documentation
= Création d'un nouveau plugin =

== <u>Creation du gabarit ou plugin</u> ==

<h3>Création des fichiers et des dossiers</h3>

<ul>
 <li> Commencez par vous rendre dans le dossier _plugins_ ("_nomDuProjet/include/plugins_") de votre projet.</li>
 <li> Créez-y un dossier, avec pour nom le nom de votre futur plugin(pas d'espace ni de caractère spécial). <b>Le nom du plugin doit, de préférence, être le même que celui de la table utilisée (utile pour le moteur de recherche)</b>.</li>
[http://www.opixido.com/ocms/screen/gabarit/gabarit-arbo.png]
 <li> Créez-y le fichier PHP qui va générer le gabarit (controlleur). De préférence un nom évocateur comme "genNomDuPlugin".</li>
</ul>

<h4>Le controlleur</h4>

Dans ce fichier, déclarez votre classe. La classe créée doit étendre la classe _ocmsGen_ ou la classe _ocmsPlugin_.
La fonction _init()_ et _afterInit()_ seront automatiquement appelées avant la fonction _gen()_. Elles ne doivent rien retourner et ne rien afficher.
La fonction _gen()_ retournera le code du gabarit/plugin à afficher.

<b>ATTENTION : le fichier PHP générant le gabarit doit porter le même nom que la classe déclarée et aucune fonction ne doit porter le même nom que la classe</b>

Créez dans la classe les fonctions _init()_ (facultatif) et _gen()_.

Vous devriez obtenir quelque chose comme :
<code>
class genTest extends ocmsGen
{
 public function init() {
  //Do something
 }
 public function gen() {
  //Return something
 }
}
</code>

==== Le modèle ====

<ul>
<li>Créez un fichier PHP _front.php_ dans le dossier courant (_include/plugins/nomDeVotrePlugin_). Ce fichier sera automatiquement inclu. Vous pourrez y déclarer vos classes utiles au fonctionnement du plugin.
</li>
<li>
Vous y déclarerez vos classes utiles au plugin. Chaque classe utilisant la base de données devra étendre la classe _row_.

<code>
class maClasse extends row
{
 //Constructeur
 //Paramètre : nom de la table et id ou array de la ligne de la table
 function __construct( $roworid) {
  parent::__construct('nomTable', $roworid);
 }

 function getTitle() {
  return 'Hello world !';
 }
}
</code>
<p>La classe _row_ permet d'obtenir une base de données orientée objet de à partir d'une base de données relationnelle.</p>
<p>Il est nécessaire de déclarer dans le fichier _config.php_ du plugin toutes les relations de la table en question ($relations, $relinv, $tablerel).</p>
<p>Elle permet en plus de :
 <ul>
 <li>Générer directement l'url d'un fichier enregistré ($uploadFields)</li>
 <li>Générer la traduction d'un champ</li>
 </ul>
</p>
</li>

</ul>

Exemple avec une classe "Evenement" :

<code>
class Evenement extends row
{
 //Constructeur
 //Paramètres : table "evenement" + id de la ligne ou array
 function __construct( $roworid) {
  parent::__construct('evenement', $roworid);
 }

 function getTitle() {
  //Si l'évènement est un champ multilingue, alors la fonction retournera la traduction en fonction de
  //la langue en question ("evenement_titre_fr", "evenement_titre_en", ...)
  return $this->evenement_titre;
 }
 
 function getUrlImg(){
  //Retournera l'url de l'image
  //J'ai au préalablement défini le champ en tant qu'uploadField
  return $this->evenement_img;
 }

}
</code>

*Plus d'informations sur la configuration du fichier _config.php_ sur [GabaritBO#Les_types_de_champs cette page]*

==== La vue ====

Pour intégrer la vue au controlleur, veuillez procéder comme suit :

<ul>
<li>Créez dans le dossier courant un dossier qui va contenir le template du gabarit (_/tpl_ par exemple).</li>
<li>Créez dans le nouveau dossier le template PHP (_nomDuTemplate.php_)
<code language="html">
<!-- Template test.php -->
<div id="test">
 <h2>Hello world</h2>
</div>
</code>
</li>
<li>Pour implémenter la vue dans le controller, vous devrez déclarer un objet de type _genTemplate_ et lui associer le template précédemment créé.
<code>
public function gen(){
 //Déclaration du nouveau template
 $tpl = new genTemplate();
 //Affectation du template. Attention : ne pas rajouter l'extension au nom du template lors du chargement
 $tpl->loadTemplate('nomDuTemplate', 'plugins/nomDuPlugin/cheminVersTemplate');

 //On retourne le template généré
 return $tpl->gen();
}
</code>
</li>
</ul>

Documentation de la classe genTemplate [Classes ici].

<u>Insérer des variables dans le template :</u>

<ul>
<li>Commencez par insérer les noms des variables dans le template. Pour cela, insérez des noms entourés par des arobases.
<code language="html">
<!-- Template test.php -->
<div id="test">
 <h2>@@titre@@</h2>
 <!-- Cette manière fonctionne aussi : -->
 <p><?php echo $this->text; ?></p>
</div>
</code>
</li>
<li>Puis , lors de la déclaration du template via la classe _genTemplate_, implémentez ces variables :
<code>
public function gen(){
 $tpl = new genTemplate();
 $tpl->loadTemplate('test', 'plugins/pluginTest/tpl');
 //Affectation des valeurs
 $tpl->titre = 'Hello world';
 $tpl->text = 'lorem ipsum';

 return $tpl->gen();
}
</code>
</li>
</ul>

<u>Boucler dans un template</u>

<ul>
<li><b>1e méthode :</b>

<ul>
<li>Dans le template, insérez deux balises XML comme ceci : 
[http://www.opixido.com/ocms/screen/gabarit/vue-template2.png]
<br/>Elles vont nous servir à définir l'endroit où boucler.
</li>
<li>
Ensuite, dans le controlleur, après avoir déclaré votre template, ajoutez-lui des bloc comme ceci :
<code>
public function gen(){
 $tpl = new genTemplate();
 $tpl->loadTemplate('test', 'plugins/pluginTest/tpl');
 //Affectation des valeurs
 $tpl->titre = 'Hello world';
 $table = array('text1', 'test2', 'text3');
 foreach($table as $row){
  //On ajoute un nouveau bloc
  //Veillez à lui donner le même nom que la balise
  $tplItem = $tpl->addBlock('ITEM');
  $tplItem->text = $row;
 }

 return $tpl->gen();
}
</code>
</li>
</ul></li>

<li><b>Deuxième méthode :</b>
<ul>
<li>Dans le template :
[http://www.opixido.com/ocms/screen/gabarit/vue-template3.png]
</li>
<li>Dans le controlleur :
<code>
public function gen(){
 $tpl = new genTemplate();
 $tpl->loadTemplate('test', 'plugins/pluginTest/tpl');
 //Affectation des valeurs
 $tpl->titre = 'Hello world';
 $table = array('text1', 'test2', 'text3');
 $tpl->textes = $table;

 return $tpl->gen();
}
</code>
</li>
</ul>
</li>

</ul>

==== Mise en place de la configuration BO/FO ====

 * Crééz un fichier _config.php_ qui sera automatiquement inclu.

[GabaritBO Plus de détails ici]


<h4>Arborescence finale</h4>

[http://www.opixido.com/ocms/screen/gabarit/gabarit-arbo2.png]


== <u>Installation du gabarit ou du plugin</u> ==

<h3>Enregistrement dans la table "s_gabarit"</h3>

Trois méthodes sont possibles : 

<ul>

<li>Directement dans le système de gestion de BD :
<ul>
<li>Dans la table "s_gabarit" de votre base de données, créez une nouvelle ligne
</li>
<li>Insérez les champs suivants :
|| _ gabarit_id _ || _ gabarit_titre _ || ... || _ gabarit_classe _ || ... || _ gabarit_plugin _ ||
|| ... || titre du gabarit || ... || titre de la classe || ... || nom du dossier ||

</li>
</ul></li>

<li>A partir du Back-Office
<ul>
<li>Ajouter le paramètre "&curTable=s_gabarit" à la fin de l'url</li>
<li>Cliquez sur "Ajouter un élément"</li>
<li>[http://www.opixido.com/ocms/screen/plugins/rss-creation_gabarit.png]
Renseignez le titre du gabarit/plugin, le nom de la classe, des paramètres (facultatif), et le nom du dossier contenant le gabarit/plugin.</li>
</ul></li>

<li>Insérer automatiquement :
<ul>
<li>Créer un fichier XML _"datas.xml"_</li>
<li>Insérer :
<code language="xml">
<?xml version="1.0" encoding="utf-8" ?>

<opixidoocms>

 <!-- Table s_gabarit -->

  <s_gabarit>

   <gabarit_id>/* Id */</gabarit_id>

   <gabarit_titre>/* Titre */</gabarit_titre>

   <gabarit_para_crea></gabarit_para_crea>

   <gabarit_para_include></gabarit_para_include>

   <gabarit_full_template></gabarit_full_template>

   <gabarit_bdd_deco>0</gabarit_bdd_deco>

   <gabarit_classe>/* Nom de la classe */</gabarit_classe>

   <gabarit_classe_param></gabarit_classe_param>

   <gabarit_plugin>/* Nom du plugin (dossier) */</gabarit_plugin>

   <gabarit_index_table>/* Table utilisée */</gabarit_index_table>

   <gabarit_index_url>news=news_id</gabarit_index_url>

   <fk_default_rubrique_id>0</fk_default_rubrique_id>

    </s_gabarit>

</opixidoocms>
</code>
</li>
<li>Ce fichier sera automatiquement appelé lors de l'installation du gabarit. Il permettra d'enregistrer automatiquement les informations du gabarit dans la table _"s_gabarit"_</li>
</ul>
</li>

</ul>

<h3>Installer le plugin/gabarit</h3>

<ul>
<li>Rendez-vous sur la page d'administration de votre site</li>
<li>Cliquez sur le lien "Plugins" dans "Dev"</li>
<li>Sélectionnez "Ajouter un élément", sélectionnez votre nouveau plugin, puis enregistrez. Cliquez ensuite sur "Installer"</li>
</ul>
Lors de l'installation, les fichiers _"datas.xml"_ et _"install.sql"_ seront automatiquement appelés (facultatif). 
Le fichier _"install.sql"_ doit contenir du SQL pouvant créer la ou les table(s) utilisée(s) dans le plugin.

=== Attribuer un gabarit à une page ===

<ul>
<li>Rendez-vous dans la gestion du contenu et sélectionnez la page où vous souhaitez insérer votre nouveau gabarit</li>
<li>Cliquez sur "Modifier"</li>
<li><p>Dans l'onglet "Paramètres", sélectionnez votre nouveau gabarit (champ "gabarit spécial"), puis enregistrez et validez.</p>
Pou afficher un icône, il suffit d'enregistrer cette fonction dans le contrôleur :
<code>
public static function ocms_getPicto() 
{
 //Remplacez la fin par le nom de l'image souhaitée
 return ADMIN_PICTOS_FOLDER . ADMIN_PICTOS_ARBO_SIZE . '/actions/media-eject.png';
}
</code>
</li>
</ul>

<h2>Exemples de plugins et gabarits</h2>

<ul>
<li>[pluginsDeBase Plugins de base]</li>
<li>[ExempleCreationGabarit Gabarit actualités]</li>
</ul>