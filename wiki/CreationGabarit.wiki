#labels Documentation
= Création d'un nouveau gabarit de page =

== Mise en place ==


=== Création des dossiers et fichiers PHP ===

 * Commencez par vous rendre dans le dossier "plugins" (nomDuProjet/include/plugins) de votre projet

 * Créez-y un dossier, avec pour nom le nom de votre futur plugin(pas d'espace ni de caractère spécial)
 * Créez-y le fichier PHP qui va générer le gabarit. De préférence un nom évocateur comme "genNomDuPlugin".
  # Dans ce fichier, déclarez votre classe ("genNomDuPlugin")
  # *ATTENTION : le fichier PHP générant le gabarit doit porter le même nom que la classe déclarée. Aucune fonction ne doit porter le même nom que la classe*
  # Créez dans la classe les fonctions init() (facultatif) et gen()

 * Créez un fichier PHP front.php qui sera automatiquement parcouru. Vous pourrez y déclarer vos classes utiles au fonctionnement du plugin.

 * Créez, toujours dans le même dossier, un dossier qui va contenir le template du gabarit ("tpl" par exemple).
 * Créez dans le dossier "tpl" le template PHP ("nomDuPlugin.php" par exemple)

[http://www.opixido.com/ocms/screen/gabarit/gabarit-arbo.png]


=== Insertion dans la base de données ===

 * Dans la table "s_gabarit" de votre base de données, créez une nouvelle ligne.

 * Insérez les champs suivants :
|| _ gabarit_id _ || _ gabarit_titre _ || ... || _ gabarit_classe _ || ... || _ gabarit_plugin _ ||
|| ... || titre du gabarit || ... || titre de la classe || ... || nom du dossier ||


=== Ajouter le gabarit dans une rubrique ===

 * Rendez-vous sur la page d'administration de votre site (monSite/admin)
 * Cliquez sur le lien "Plugins" dans "Dev".
 * Sélectionnez "Ajouter un élément", sélectionnez votre nouveau plugin, puis enregistrez. Cliquez ensuite sur "Installer".
 * Rendez-vous ensuite dans la gestion du contenu et sélectionnez la page où vous souhaitez insérer votre nouveau gabarit.
 * Cliquez sur "Modifer"
 * Dans l'onglet "Paramètres", sélectionnez votre nouveau gabarit (champ "gabarit spécial"), puis enregistrez et validez.


=== La configuration ===

 * Créez dans le dossier de votre plugin le fichier PHP "config.php".
  ( C'est dans ce fichier que vous configurerez l'affichage et la gestion du plugin dans le back-office )
 * 



== Un exemple : Actualités == 

Nous allons voir dans cet exemple comment créer un gabarit simple mais très utile : les actualités.

 === Création du dossier et des fichiers ===

 * Commencez par créer un dossier ("actualites" par exemple) dans le dossier des plugins.
 * Ajoutez dans ce dossier créé un fichier PHP nommé "genActualites".
 * Créez-y une classe genActualites héritant de la classe ocmsGen (class genActualites extends ocmsGen {})
  # ...
 * Créez ensuite dans le dossier de votre plugin :
  # un fichier "front.php" (contiendra la classe Actualite)
  # un fichier "config.php" (fichier de config pour le back-office)
  # un dossier "tpl" (contient le template)
  # dans le dossier "tpl", un template "actualites.php"
  # un dossier "forms"
  # dans le dossier "forms", un fichier "actualites.forms.php" (contient les champs de la table à remplir dans le BO)

Vous devriez obtenir cette arborescence :

[http://www.opixido.com/ocms/screen/gabarit/gabarit-arbo-actualites.png]

 ...


=== Insertion du gabarit dans la base de données ===

 * Insérer dans la table s_gabarit une ligne : 
|| gabarit_titre || gabarit_classe || gabarit_plugin ||
|| Actualités || genActualites || actualites ||


=== Ajouter le gabarit dans une rubrique ===

[http://www.opixido.com/ocms/screen/gabarit/gabarit-actus.png]


=== Création de la table actualités ===

 * Créez une nouvelle table (exemple : "a_actualite")
 * Ajoutez ses attributs : 
  # Un identifiant : "actualite_id" (INT (11) en auto-incrémente)
  # Le nom de l'actualité : "actualite_nom_fr" (VARCHAR) (ajoutez de même "actualite_nom_en" pour la version anglaise. Plus d'infos sur la gestion multilingue [http://code.google.com/p/opixido-ocms/wiki/GestionLangues ici])
  # Le contenu de l'actualité : "actualite_contenu_fr" (TEXT)
  # Une image ! "actualite_img" (VARCHAR)
  # Une date : "actualite_date" (DATETIME)
  # Un booléen pour la mise en ligne : "en_ligne" (TINYINT(1))

|| <u>actualite_id</u> || INT(11), auto-incremente ||
|| actualite_titre_fr || VARCHAR(250) ||
|| actualite_titre_en || VARCHAR(250) ||
|| actualite_contenu_fr || TEXT ||
|| actualite_contenu_en || TEXT ||
|| actualite_img || VARCHAR(250) ||
|| actualite_date || DATETIME ||
|| en_ligne || TINYINT(1) ||

Les types de champs et attributs générés automatiquement par OCMS sont listés [http://code.google.com/p/opixido-ocms/wiki/configurationBO sur cette page]


=== Création du template de la liste des actualités ===

 * Ouvrez votre template actualites.php qui se trouve dans le dossier "tpl"
 * Introduisez-y votre code HTML et vos variables ( sous la forme @@maVariable@@ )
  # Si vous souhaitez boucler un bloc, placez celui-ci entre une balise XML : <ACTUALITE>`<div>Votre code</div>`</ACTUALITE>
 * Voici à quoi devrait finalement ressembler votre template :
[http://www.opixido.com/ocms/screen/gabarit/gabarit-actualites-template.png]
  

Plus d'infos sur la fonction _t()_ et les textes paramétrables [http://code.google.com/p/opixido-ocms/wiki/TextesParam ICI]


=== Création de la classe Actualite ===

<code language="php">
class Actualite extends row 
{
  function __construct( $roworid) {  
    parent::__construct('a_actualite', $roworid);
  }

  function getTitle() 
  {
    return $this->actualite_titre;
  }
    
  function getContenu()
  {
    return $this->actualite_contenu;
  }

  function getImg($w,$h)
  {
    if($w && $h)
      return $this->actualite_img->getCropUrl($w,$h);
    else
      return $this->actualite_img;
  }
  
  
}
</code>

Vous pouvez déclarer cette classe dans _genActualités.php_ ou même dans _config.php_

=== Développement de la liste des actualités ===

 * Ouvrez le fichier genActualites.php
 * Si ce n'est pas encore fait, définissez-y la classe _genActualites_ héritant d'_ocmsGen_
 * Créez une fonction _gen()_
C'est dans la fonction _gen()_ que nous développerons tout le traitement.
<code language="php">
class genActualites extends ocmsGen
{
   public function gen(){

   }
}
</code>
 * Chargez le template précédemment créé et générez-le :
<code language="php">
public function gen(){

  $tpl = new genTemplate();
  $tpl->loadTemplate('actualites', 'plugins/actualites/tpl');
  return $tpl->gen();
}
</code>

 * Récupérez ensuite toutes vos actualités qui sont en ligne grâce à la fonction _doSql()_ :
<code language="php">
//la fonction doSql() renvoie le résultat sous forme de tableau
$actualites = doSql(' SELECT * FROM a_actualite WHERE en_ligne=1 ORDER BY actualite_date');
</code>


 * Si on obtient un résultat, on boucle. Sinon, on affiche qu'il n'y a aucune actualité.
<code language="php">
//La fonction recordCount() compte le nombre de lignes obtenues
if($actualites->recordCount()>0)
{
  //On boucle
  foreach($actualites as $row)
  {
    //On définit le bloc sur lequel on boucle
    $bloc = $tpl->addBlock('ACTUALITE');
  }
}
//Si on obtient aucun résultat, on supprime le bloc
else
{
  $tpl->delBlock('ACTUALITE');
  echo t('aucune_actualite');
}
</code>

 * On va ensuite déclarer l'actualité dans la boucle, puis ajouter dans le template ses valeurs

<code language="php">
// ...
foreach($actualites as $row)
{
  //On définit le bloc sur lequel on boucle
  $bloc = $tpl->addBlock('ACTUALITE');

  //On déclare notre actualite : on lui envoie la ligne $row
  //Cette déclaration équivaut à $actu = new row('a_actualite',$row);
  $actu = new Actualite($row);

  //On renvoie les valeurs des variables définies dans le template
  // (image, titre, date et contenu)

  //Le titre
  //pas besoin de préciser le langage, ocmsGen s'en charge pour vous
  $bloc->titre = $actu->actualite_titre;
  //De même pour le contenu
  $bloc->contenu = $actu->actualite_contenu;
  //On affiche la date
  $bloc->date = $actu->actualite_date;
  //Le CMS renvoie automatiquement l'url complet de l'image
  $bloc->img = $actu->actualite_img;
}
// ...
</code>

Le code complet du fichier :

<code language="php">
class genActualites extends ocmsGen
{
  public function gen(){
 
    //On charge le template
    $tpl = new genTemplate();
    $tpl->loadTemplate('actualites', 'plugins/actualites/tpl');

    //On récupère les données de la table a_actualite
    $actualites = doSql(' SELECT * FROM a_actualite WHERE en_ligne=1 ORDER BY actualite_date');

    if($actualites->recordCount()>0)
    {
      //On boucle
      foreach($actualites as $row)
      {
        //On définit le bloc sur lequel on boucle
        $bloc = $tpl->addBlock('ACTUALITE');

        //On déclare notre actualité
        $actu = new Actualite($row);

        //On ajoute les valeurs de l'actualité aux variables du template
        $bloc->titre = $actu->actualite_titre;
        $bloc->contenu = $actu->actualite_contenu;
        $bloc->date = $actu->actualite_date;
        $bloc->img = $actu->actualite_img;
      }
    }
    //Si on obtient aucun résultat, on supprime le bloc
    else
    {
      $tpl->delBlock('ACTUALITE');
      echo t('aucune_actualite');
    }

    //On retourne et génère template
    return $tpl->gen();
  }
}
</code>

=== Développement de l'affichage d'une actualité ===

 * Créez un nouveau template "_actualite.php_" dans le dossier "tpl".
[http://www.opixido.com/ocms/screen/gabarit/gabarit-actualite-template.png]

 * Rajoutez dans la classe Actualite déclarée précédemment une fonction permettant de récupérer l'url de l'actualité : 

<code language="php">
class Actualite extends ocmsGen
{
  //...

  //Renvoie la lien pour visionner l'actualité
  function getUrl()
  {
    return getUrlFromId(getRubriqueByGabarit('genActualites'), LG, array('actualite'=>$this->actualite_id));
  } 

  //getUrlFromId permet de récupérer l'Url complet d'une page grâce à son Id. On peut rajouter la langue et d'autres paramètres.
  //getRubriqueByGabarit permet de récupérer l'id de la page grâce au gabarit
  //On ajoute la langue (constante LG) et une actualite en paramètres
}
</code>

 * Dans la classe genActualites, renommez la fonction _gen()_ en _genListeActualites()_ par exemple.
 * Ajoutez une fonction _genActualite()_ pour l'affichage d'une seule actualité

<code language="PHP">
public function genActualite()
{
  //On vérifie que l'actualité est en paramètre et existe (explication plus bas)
  if($this->actualite)
  {
    //On charge le nouvau template
    $tpl = new genTemplate();
    $tpl->loadTemplate('actualite', 'plugins/actualite/tpl');

    //On affecte les valeurs aux variables du template
    $tpl->img = $this->actualite->getImg();
    $tpl->titre = $this->actualite->actualite_titre;
    $tpl->date = $this->actualite->actualite_date;
    $tpl->contenu = $this->actualite->actualite_contenu;
  }
}
</code>

 * Redéclarez une fonction _gen()_ comme ceci :

<code language="PHP">
public function gen()
{
  return $this->genListeActualites();
}
</code>